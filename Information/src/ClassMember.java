	/* Class Instance의 정의
	(1) Class : 설계도, 그러니까 제품을 생산하기 위해 레시피를 만드는 곳이다. / 연관되어 있는 변수와 메소드의 집합이다
	(1-1) Class 안에는 [클래스 변수], [클래스 메소드], [인스턴스 변수], [인스턴스 메소드]가 존재한다
	
	(2) Variable : 변수는 해당되는 것의 명칭을 지정하는 의미 또는 그곳에 데이터를 저장한다 라는 의미
	(2-1) Class Variable : 클래스가 사용이 되면 실행이 가능하다. // 고정된 값
	(2-2) Instance Variable : 인스턴스가 생성이 되면 사용이 가능하다.
			Instance : 제품, 그러니까 제품을 생산하는 곳이다.
					인스턴스 메소드는 클래스 멤버에 접근 할 수 있다 // 멤버 = 변수, 메소드
					클래스 메소드는 인스턴스 멤버에 접근 할 수 없다 //      "
					** 클래스 메소드가 인스턴스에 접근 할 수 없는 이유 : 제품이 만들어지지 않은 상태인데 설계도만 들고 제품을 확인 할 수는 없다.
	
	(3) Method : 설계도에 따라서 제품을 생산하기 위해 작업범위를 정의하여 생산하는 곳이다.
		** 메소드의 장점 : 중복코드 제거, 관리용이, 재사용 가능
		** 
		*
	정리
	(1) Class 선언 : 설계도 작성
		Class의 선언 영역
		1. Class 영역 : 제품의 종류를 선언
			* Class 영역에 선언되는 변수 : 인스턴스 변수(iv), 클래스 변수(cv)로 나뉜다
		ex) class HowManyEatFood{
				public static void main(String[] args){
					int rice;
					int kimch;
					static int human = 1;
				}
			}
		2. Method 영역 : 제품을 생산하는 장비를 운용하는 행위를 정하는 범위
			* Method 영역에 선언되는 변수 : 지역변수(lv)로서 메소드가 종료될 경우 사라지는 변수이다.
		ex) void method(){
				int meth;
			}
		

	(2) Instance 선언 : 공장을 만든것
		
	(2-1) 
		
	변수, 상수 , 메소드
	
	
	public : public은  접근제어를 위한 선언으로   
			private > protected > public  순으로 함수의 참조를 제한하는 구문입니다. 
			public : 클래스, 변수, 메소드 생성자 등의 모든 접근을 허용한다.
    					보통 상수(static final 변수), 메소드(get/set) 등에 많이 사용.
			protected :  기본적으로 같은 패키지에 있는 (클래스, 변수, 메소드, 내부클래스)에서
            			접근 가능하나 추가적으로, 다른 패키지의 하위클래스에서도 상속 가능.
            private : 같은 클래스에서만 접근이 가능하다. 
    	  				보통 인스턴스 변수, 외부에서 호출해서는 안되는 메소드
    	  							public	protected	default	private
			같은 패키지, 같은 클래스		허용		허용			허용		허용
			같은 패키지, 상속 관계		허용		허용			허용		불용
			같은 패키지, 상속 관계 아님	허용		허용			허용		불용
			다른 패키지, 상속 관계		허용		허용			불용		불용
			다른 패키지, 상속 관계 아님	허용		불용			불용		불용
            	  
    static : static은 정적 함수임을 의미하는데 해당 함수나 변수가 초기화(처음실행)될때			
			선언이 되면 프로그램이 종료될때까지 살아 메모리에 상주한다.
			변수에 사용하는 경우 해당 함수가 종료되면 사라지는 지역변수와 달리 정적변수로 
			선언되면 실행이 끝나도 메모리에 상주되어 다른 객체에서 참조가 가능하게 되죠. 
			main함수는 프로그램이 처음 실행되어 종료될때까지 모든 객체에서 참조 될 수 있어야 하므로
			종합하면 위   public static void main(String arg[]) 문구는 
			public 으로 모든 접근을 허가하고 static으로 프로그램이 종료될때까지 실행되며, 
			void 리턴값은 없는  main 함수로,  데이터값은 문자열  이라는 뜻입니다. 
	 */
	
	
class C1{
	    static int static_variable = 1;
	    int instance_variable = 2;
	    static void static_static(){
	        System.out.println(static_variable);
	    }
	    static void static_instance(){
	        // 클래스 메소드에서는 인스턴스 변수에 접근 할 수 없다. 
	        // System.out.println(instance_variable);
	    }
	    void instance_static(){
	        // 인스턴스 메소드에서는 클래스 변수에 접근 할 수 있다.
	        System.out.println(static_variable);
	    }
	    void instance_instance(){        
	        System.out.println(instance_variable);
	    }
	}
public class ClassMember {  
	    public static void main(String[] args) {
	        C1 c = new C1();
//	        // 인스턴스를 이용해서 정적 메소드에 접근 -> 성공
//	        // 인스턴스 메소드가 정적 변수에 접근 -> 성공
//	        c.static_static();
//	        
//	        // 인스턴스를 이용해서 정적 메소드에 접근 -> 성공
//	        // 정적 메소드가 인스턴스 변수에 접근 -> 실패
//	        c.static_instance();
//	        
//	        // 인스턴스를 이용해서 인스턴스 메소드에 접근 -> 성공
//	        // 인스턴스 메소드가 클래스 변수에 접근 -> 성공
//	        c.instance_static();
//	        
//	        // 인스턴스를 이용해서 인스턴스 메소드에 접근 -> 성공 
//	        // 인스턴스 메소드가 인스턴스 변수에 접근 -> 성공
//	        c.instance_instance();
//	        
//	        // 클래스를 이용해서 클래스 메소드에 접근 -> 성공
//	        // 클래스 메소드가 클래스 변수에 접근 -> 성공
//	        C1.static_static();
//	        
//	        // 클래스를 이용해서 클래스 메소드에 접근 -> 성공
//	        // 클래스 메소드가 인스턴스 변수에 접근 -> 실패
//	        C1.static_instance();
//	        
//	        // 클래스를 이용해서 인스턴스 메소드에 접근 -> 실패
//	        //C1.instance_static();
//	        
//	        // 클래스를 이용해서 인스턴스 메소드에 접근 -> 실패
//	        //C1.instance_instance();
	        
	        
	        /*
	         이해가 안가시는 분들을 위해 소스 구조로 대략 설명을 드리자면

			EX클래스( // 클래스 안에 4가지가 존재할 수 있음 , EX클래스는 공장이라고 생각하세요
			1.클래스 변수(static)
			2.클래스 메소드(static)
			3.인스턴스 변수
			4.인스턴스 메소드)
			
			메인을 포함한 클래스(
			메인(
			1. EX클래스 인스턴스 생성 // EX 공장에서 제품생산
			)
			)
			
			순인데
			
			보시면
			1.클래스 변수
			2.클래스 메소드
			이 두가지는 EX클래스의 멤버이고, // 공장의 제조방법 및 원자재? 이런 느낌으로 생각하십쇼
			
			3.인스턴스 변수
			4.인스턴스 메소드
			는 인스턴스의 멤버입니다. // 제품의 실제 사진 및 사용 동영상? 이런 느낌으로 생각하십쇼
			
			제품(인스턴스)는 공장(클래스)를 통해 나온 제품(인스턴스)이기에 제품의 생산데이터(클래스변수,클래스메소드)를 보고 싶으면 공장에 관련 자료를 요청 및 컴플레인을 통한 수정 및 확인이 가능합니다.
			
			하지만 공장(클래스)는 생산하지도 않은 제품(인스턴스)의 실물 사진이나 실물 동영상을 확인할 수 없잖습니까?
			
			그러므로 공장(클래스)는 제품의정보(인스턴스변수,인스턴스메소드)에 접근할 수 없습니다.
			
			+ 소스 순서상 클래스를 먼저 만들고 인스턴스를 나중에 만들기때문에 그렇습니다.
			
			도움이되었다면 좋겠네요
	         */
	   }
	 
}
